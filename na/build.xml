<!-- $Id: build.xml,v 1.1 2000-08-20 23:55:02 briand Exp $ -->

<!-- This is a build file which can be used with the Jakarta Ant tool to -->
<!-- build various Dubh libraries / applications. It's written to be fairly -->
<!-- generic; in theory, only the init target should need to be changed for -->
<!-- each project. When xml inclusions are supported by various xml parsers -->
<!-- I'll probably just include all the other stuff from somewhere common -->

<!-- More information on Ant can be found at http://jakarta.apache.org -->

<project name="dmp" default="all" basedir=".">
  <target name="init">
    <tstamp/>
    <!-- The buildnumber task is in the devtools CVS module. It must be in -->
    <!-- the classpath before building any other module -->
    <taskdef name="buildnumber" classname="org.dubh.tool.ant.BuildNumber" />

    <!-- The name and main version number of this project. -->
    <property name="product" value="NewsAgent" />
    <property name="toppackage" value="org.javalobby.apps.newsagent" />
    <property name="majorversion" value="2" />
    <property name="minorversion" value="0" />

    <!-- The CVS module for this project. This should usually be a single top level directory -->
    <property name="cvsmodule" value="na" />
    <!-- Runs the buildnumber task which will generate a unique build number and make it available to the rest of this build file -->
    <buildnumber propertyfile="${cvsmodule}-build.properties" />
    <property file="${cvsmodule}-build.properties" />

    <property name="srcbase" value="src" />
    <property name="classbase" value="class" />
    <property name="srcdir" value="${cvsmodule}/${srcbase}" />
    <property name="classdir" value="${cvsmodule}/${classbase}" />
    <property name="jardir" value="${cvsmodule}/lib" />
    <property name="cvsroot" value="/usr/local/cvsroot" />
    <property name="moduleshort" value="${cvsmodule}-${majorversion}.${minorversion}" />
    <property name="modulelong" value="${moduleshort}.${dubh.buildnumber}" />
    <property name="jarfile" value="${jardir}/${moduleshort}.jar" />

    <!-- The classpath. You should really only include things that are guaranteed to be in the jardir at build time -->
    <property name="classpath" value="${jardir}/mail.jar:${jardir}/activation.jar:${jardir}/dju-2.0.jar:${jardir}/dmp-1.0.jar" />
    <property name="snapshot" value="${cvsmodule}/${modulelong}-src.zip" />
    <property name="docdir" value="${cvsmodule}/doc" />    
    <property name="javadocdir" value="${docdir}/api" />
    <property name="javadocpkg" value="${toppackage}.*" />
    <property name="javadoctitle" value="${product} ${modulelong}" />
    <!-- Used to temporarily build a distribution of the module for zipping -->
    <property name="distribtmp" value="distribtmp" />
    <property name="distribname" value="${cvsmodule}/${modulelong}-bin.zip" />

    <!-- Gotcha: this is relative to the srcdir , sigh... -->
    <property name="xslthome" value="../../devtools/xslt" />
    <property name="xugenxsl" value="${xslthome}/xugen.xsl" />
    <property name="xrtsxsl" value="${xslthome}/xrts.xsl" />

    <!-- Comma separated list of files that should be copied from the source path into the classpath. You can use wildcards -->
    <property name="copyfiles" value="**/*.gif,**/*.properties" />

    <!-- Comma separated list of xml files that should be converted to Java using the xui transforming stylesheet -->
    <property name="xuifiles" value="**/*.xui" /> 

    <!-- Comma separated list of xml files that should be converted to Java using the xrts transforming stylesheet -->
    <property name="xrtsfiles" value="" />

    <echo message="${cvsmodule} build number ${dubh.buildnumber} started ${TODAY} at ${TSTAMP}" />
  </target>
  
  
  <!-- Pull source code from CVS and set up initial dirs -->
  <target name="pullsrc" depends="init">
    <cvs  cvsRoot="${cvsroot}"
          command="export"
          package="${cvsmodule}"
          dest="."
          date="now"
          quiet="true"
          failonerror="true"
    />
      
      
  </target>

  <!-- grabs the latest built Dubh Java Utilities -->
  <target name="grabdeps" depends="init">
    <copydir src="dju/lib"
             dest="${jardir}"
             includes="**/*.jar"
    />
    <copydir src="dmp/lib"
             dest="${jardir}"
             includes="**/*.jar"
    />
  </target>

  <!-- Copy files from the source tree to the output path -->
  <target name="copyfiles" depends="pullsrc">
    <copydir  src="${srcdir}"
              dest="${classdir}"
              includes="${copyfiles}"
    />
  </target>

  <!-- Apply the XUI transforming stylesheet to all files defined in the xuifiles -->
  <!-- property. This requires the xugen.xsl file to be present in devtools/xslt -->
  <!-- and the xalan XSLT engine to be in your ant CLASSPATH -->
  <target name="xui" depends="pullsrc" if="xuifiles">
    <style  basedir="${srcdir}"
            destdir="${srcdir}"
            extension=".java"
            style="${xugenxsl}"
            includes="${xuifiles}"
    />
  </target>

  <target name="xrts" depends="pullsrc" if="xrtsfiles">

  </target>
  
  <!-- Compile all source code -->
  <target name="src" depends="pullsrc,grabdeps,copyfiles,xrts,xui">
    <mkdir dir="${classdir}" />
    <javac  srcdir="${srcdir}"
            destdir="${classdir}"
            classpath="${classpath}">

    </javac>            
  </target>

  <!-- Create the JAR file -->
  <target name="jar" depends="src">
    <mkdir dir="${jardir}" />
    <jar  jarfile="${jarfile}" basedir="${classdir}" />
  </target>

  <!-- Create a source code snapshot -->
  <target name="src-snapshot" depends="src">
    <zip  zipfile="${snapshot}" 
          basedir="${srcdir}" />
  </target>

  <!-- Create javadoc -->
  <target name="javadoc" depends="pullsrc">
    <mkdir dir="${javadocdir}" />

    <javadoc  sourcepath="${srcdir}"
              classpath="${classpath}"
              destdir="${javadocdir}"
              author="true"
              version="true"
              use="true"
              windowtitle="${javadoctitle}"
              doctitle="&lt;h1&gt;${javadoctitle}&lt;/h1&gt;"
              packagenames="${javadocpkg}"
    />
  </target>

  <!-- The all target -->
  <target name="all" depends="jar,src-snapshot,javadoc" />

  <!-- The clean target obliterates all traces of the module from the build dir -->
  <target name="clean" depends="init">
    <deltree dir="${cvsmodule}" />
  </target>

  <!-- The distrib target creates a binary distribution of the module and zips it up. -->
  <!-- The distribution consists of all the directories after building, -->
  <!-- excluding the srcdir and classdir. -->
  <target name="distrib" depends="all">
    <!-- Remove any existing distribution -->
    <delete file="${distribname}" />
    <!-- Remove any existing distribtmp -->
    <deltree dir="${distribtmp}" />
    <mkdir dir="${distribtmp}/${modulelong}" />

    <copydir  src="${cvsmodule}"
              dest="${distribtmp}/${modulelong}"
              excludes="${srcbase}/**,${classbase}/**"
    />

    <!-- Get rid of empty directories in case they exist -->
    <deltree dir="${distribtmp}/${modulelong}/${srcbase}" />
    <deltree dir="${distribtmp}/${modulelong}/${classbase}" />

    <zip      zipfile="${distribname}"
              basedir="${distribtmp}"
    />

    <!-- And get rid of the temporary directory -->
    <deltree dir="${distribtmp}" />
  </target>

  
</project>
